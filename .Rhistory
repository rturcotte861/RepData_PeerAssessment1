x<-1
print(x)
x
msg<-"hello"
clear
clc
delete
x<-5
x
print9x)
msg<-"hello"
msg
x<-1:20
x
1
1L
clear()
c<-c(True, False)
x <- c(True, False)
x <- c(0.5, 0.7)
x <- c(T,F)
x <- c(T,2)
x <- c(1.7,a)
x <- c(1.7,"a")
x <- c(T,"a")
m <-matrix(2,3)
m
m <-matrix(1:6,2,3)
m
dim(m)
attributes(m)
x <- factor(c("yes","no","no", "yes","yes"))
x
table(x)
unclass(x)
x <- factor(c("yes","no","no", "yes","yes")), levels = c("yes", "no")
x <- factor(c("yes","no","no", "yes","yes"), levels = c("yes", "no"))
table(x)
attributes(x)
library(datasets)
data(iris)
?iris
View(iris)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
View(mtcars)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
debug(ls)
ls
ls
debug(ls)
ls()
tapply(mtcars$hp, mtcars$cyl, abs)
s<-tapply(mtcars$hp, mtcars$cyl, abs)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
pattern = "O"
ls(pattern = "O")
ls()
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
f
?gl
tapply(x, f, mean)
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
code <- xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc,"//li[class='score']",xmlValue)
scores
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
scores
library(XML)
scores <- xpathSApply(doc,"//li[class='score']",xmlValue)
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
install.package("RCurl")
install.packages(RCurl)
install.packages("RCurl")
library(RCurl)
library(XML)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc,"//li[class='score']",xmlValue)
scores
fileUrl <- "http://www.www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <-xmlRoot(doc)
xmlName(rootNode)
rootNode[[1]]
library(RCurl)
library(XML)
install.packages("html")
install.packages("HTML")
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc,"//li[class='score']",xmlValue)
rootNode<-xmlRoot(doc)
rootNode[[1]]
doc
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
xpathSApply(doc,"//li[]",xmlValue)
xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
code <- xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
code <- xpathSApply(doc,"//rootNode[@class='zipcode']",xmlValue)
code <- xpathSApply(doc,"//node[@class='zipcode']",xmlValue)
code <- xpathSApply(doc,"/node[@class='zipcode']",xmlValue)
code <- xpathSApply(doc,"//zipcode",xmlValue)
code
code <- xpathSApply(doc,"//zipcode",xmlsplit)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","~/data3.csv",method="Curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","~/data3.csv",method="curl")
install.packages("data.table")
fread("data3.csv")
library(data.table)
fread("data3.csv")
DT <- fread("data3.csv")
library(data.table)
DT <- fread("data3.csv")
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15)); system.time(mean(DT[DT$SEX==2,]$pwgtp15))
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
install.packages("RMySQL")
install.packages("rhdf5")
biocLite("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(hdf5)
library(rhdf5)
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran,ip_id,packacge,country)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,-(r_arch:country)
)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran,ip_id, package, size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20, size_gb = size_mb/2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
pacl_sum
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_count_sorted <- arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
rm("top_count_sorted")
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,students,sex,count,-grade)
gather(students,sex,count,-grade)
students2
?gather
res <-gather(students,sex_class,count,-grade)
res <-gather(students2,sex_class,count,-grade)
re
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
students4
submit()
submit()
?gather
submit()
students4
select(id, name, sex) %>%
students4 %>%
select(id, name, sex) %>%
students4 %>%
select(id, name, sex)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status = "passed")
failed <- mutate(failed,status = "failed")
bind_rows(passed,failed)
sat
?separate
submit()
submit()
submit()
?group_by
submit()
swirl
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now(this_day)
this_moment <- now()
this_moment
minute(this_moment)
my_date<- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989-05-17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
Try ymd("192012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(d1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment)
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
update(depart, minutes = 34, hours = 17)
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart+hours(15)+minutes(50)
?with_tz
arrive <- with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=20)
par(mar = c(4,4,2,2)
)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2,"Label")
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2,"Label")
legend("topleft",legend = "Data,pch = 20")
legend("topleft",legend = "Data",pch = 20)
plot(x,y,pch=20)
title("Scatterplot")
legend("topleft",legend = "Data",pch = 20)
fit <- lm(y,x)
fit <- lm(y~x)
abline(fit,lwd = 3)
abline(fit,lwd = 3, col = "blue")
plot(x,y,,xlab="Weight",ylab="Height",main="Scatterplot",pch=20)
legend("topright", legend = "Date",pch = 20)
z <- rpois(100,2)
par(mfrow = c(2,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par("mar")
par(mar = c(2,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=20)
library(datasets)
install.packages("impute")
install.packages("grDevices")
install.packages("grDevices")
setwd("~/Documents/Coursera/GitLocal/RepData/RepData_PeerAssessment1")
data <- read.csv(unz("activity.csv.zip", "activity.csv"), nrows=10, header=T, sep=",")
setwd("~/Documents/Coursera/GitLocal/RepData/RepData_PeerAssessment1")
data <- read.csv(unz("activity.csv.zip", "activity.csv"), nrows=10, header=T, sep=",")
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=10, header=T, sep=",")
data <- read.csv(unz("activity.zip", "activity.csv"), header=T, sep=",")
View(data)
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",")
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",")
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",")
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",")
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",", colClasses = c("integer", "Date", "integer"))
summary(data)
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",",
colClasses = c("numeric", "Date", "numeric"))
View(data)
View(data)
data <- group(data, Date)
library(dplyr)
data <- group_by(data, Date)
dataSummary <- summarize(data, sum(steps, na.rm = TRUE)
library(dplyr)
data <- group_by(data, date)
dataSummary <- summarize(data, sum(steps, na.rm = TRUE)
)
View(dataSummary)
library(dplyr)
data <- group_by(data, date)
dataSummary <- summarize(data, stepsum = sum(steps, na.rm = TRUE))
View(dataSummary)
library(dplyr)
data <- group_by(data, date)
dataSummary <- summarize(data, stepsum = sum(steps, na.rm = TRUE))
#par(mfcol = c(1, 1), mar = c(5,6,4,4)) # Set space for one graph
hist(dataSummary$stepsum,
main = "Histogram of the total number of steps taken each day", # title
xlab = "Total number of steps taken on one day", # x axis name
cex.lab=0.75, cex.axis=0.75, cex.main=0.9, # text font
col = "red") # Histogram color
library(dplyr)
data <- group_by(data, date)
dataSummary <- summarize(data, stepsum = sum(steps, na.rm = TRUE))
#par(mfcol = c(1, 1), mar = c(5,6,4,4)) # Set space for one graph
hist(dataSummary$stepsum,
main = "Histogram of the total number of steps taken each day", # title
xlab = "Total number of steps taken on one day", # x axis name
cex.lab=0.75, cex.axis=0.75, cex.main=0.9, # text font
breaks = 10,
col = "red") # Histogram color
dataSummary <- summarize(dataSummary, stepsum = stepsum,
stepmean = mean(stepsum, na.rm = TRUE),
stepmedian = median(stepsum, na.rm = TRUE))
dataSummary <- summarize(data, stepsum = stepsum,
stepmean = mean(stepsum, na.rm = TRUE),
stepmedian = median(stepsum, na.rm = TRUE))
dataSummary <- summarize(data, stepsum = sum(steps, na.rm = TRUE),
stepmean = mean(stepsum, na.rm = TRUE),
stepmedian = median(stepsum, na.rm = TRUE))
stepmean = mean(dataSummary$stepsum, na.rm = TRUE)
stepmedian = median(dataSummary$stepsum, na.rm = TRUE)
```{r, echo=TRUE, warning=FALSE}
data <- read.csv(unz("activity.zip", "activity.csv"), nrows=17568, header=T, sep=",",
colClasses = c("numeric", "Date", "numeric"))
View(data)
data_byInterval <- group_by(data, interval)
dataSummary_byInterval <- summarize(data_byInterval, stepmean_byInterval = mean(steps, na.rm = TRUE))
plot(dataSummary_byInterval$interval, dataSummary_byInterval$stepmean_byInterval, # Data
type="n", # Does not produce any points
main = "Average daily activity pattern", # title
xlab = "Time [min]", # x axis name
ylab = "Average number of steps taken during a 5 min interval", # y axis name
cex.lab=0.75, cex.axis=0.75, # text font
)
lines(dataSummary_byInterval$interval, dataSummary_byInterval$stepmean_byInterval, type="l")
dataSummary_byInterval[[dataSummary_byInterval$stepmean_byInterval == max(dataSummary_byInterval$stepmean_byInterval]]
dataSummary_byInterval[dataSummary_byInterval$stepmean_byInterval == max(dataSummary_byInterval$stepmean_byInterval]
dataSummary_byInterval[dataSummary_byInterval$stepmean_byInterval = max(dataSummary_byInterval$stepmean_byInterval]
dataSummary_byInterval[dataSummary_byInterval$stepmean_byInterval == max(dataSummary_byInterval$stepmean_byInterval)]
max(dataSummary_byInterval$stepmean_byInterval)
which.max( matrix[,2] )
which.max(dataSummary_byInterval$stepmean_byInterval)
View(dataSummary_byInterval)
dataSummary_byInterval$interval[which.max(dataSummary_byInterval$stepmean_byInterval)]
835/60
